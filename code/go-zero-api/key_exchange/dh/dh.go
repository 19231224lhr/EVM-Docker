package dh

import (
	cryptorand "crypto/rand"
	"errors"
	"io"
	"math/big"
	"sync"
)

var zero *big.Int = big.NewInt(0)
var one *big.Int = big.NewInt(1)
var two *big.Int = big.NewInt(2)

//如果组的素数是所谓的安全素数，则IsSafePrime返回true。对于一个具有安全素数的群，决定Diffie-Hellman问题（DDH）是一个“硬”问题。n参数是概率素数测试的迭代次数。
func IsSafePrimeGroup(g *Group, n int) bool {
	q := new(big.Int).Sub(g.P, one)
	q = q.Div(q, two)
	return q.ProbablyPrime(n)
}

//PublicKey是DH公钥的类型。
type PublicKey *big.Int

//PrivateKey是DH私钥的类型。
type PrivateKey *big.Int

//组表示由大素数和生成器定义的数学组。
type Group struct {
	P *big.Int // The prime
	G *big.Int // The generator
}

//GenerateKey使用cryptorand.Reader生成公钥/私钥对。
func (g *Group) GenerateKey() (private PrivateKey, public PublicKey, err error) {
	if g.P == nil {
		panic("crypto/dh: group prime is nil")
	}
	if g.G == nil {
		panic("crypto/dh: group generator is nil")
	}

	rand := cryptorand.Reader

	min := big.NewInt(int64(g.P.BitLen() + 1))
	bytes := make([]byte, (g.P.BitLen()+7)/8)

	for private == nil {
		_, err = io.ReadFull(rand, bytes)
		if err != nil {
			private = nil
			return
		}

		bytes[0] = 0
		if private == nil {
			private = new(big.Int)
		}
		(*private).SetBytes(bytes)
		if (*private).Cmp(min) < 0 {
			private = nil
		}
	}

	public = new(big.Int).Exp(g.G, private, g.P)
	return
}

//PublicKey返回与给定私钥对应的公钥。
func (g *Group) PublicKey(private PrivateKey) (public PublicKey) {
	public = new(big.Int).Exp(g.G, private, g.P)
	return
}

//检测公钥是否为组的可能元素。
func (g *Group) Check(peersPublic PublicKey) (err error) {
	if !((*peersPublic).Cmp(zero) >= 0 && (*peersPublic).Cmp(g.P) == -1) {
		err = errors.New("peer's public is not a possible group element")
	}
	return
}

//ComputeSecret返回根据自己的私钥和对等方的公钥计算的秘密。
func (g *Group) ComputeSecret(private PrivateKey, peersPublic PublicKey) (secret *big.Int) {
	secret = new(big.Int).Exp(peersPublic, private, g.P)
	return
}

const (
	rfc3526_2048G = "02"
	rfc3526_2048P = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3" +
		"404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BF" +
		"B5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C6" +
		"2F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28" +
		"FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF"

	rfc3526_3072G = "02"
	rfc3526_3072P = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3" +
		"404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BF" +
		"B5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C6" +
		"2F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28" +
		"FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1" +
		"CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA0" +
		"6D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B8" +
		"2D120A93AD2CAFFFFFFFFFFFFFFFF"

	rfc3526_4096G = "02"
	rfc3526_4096P = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3" +
		"404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BF" +
		"B5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C6" +
		"2F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28" +
		"FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1" +
		"CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA0" +
		"6D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B8" +
		"2D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF" +
		"92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B" +
		"05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF"
)

var once sync.Once
var rfc3526_2048 *Group
var rfc3526_3072 *Group
var rfc3526_4096 *Group

func initRFC3526_2048() {
	rfc3526_2048 = &Group{}
	rfc3526_2048.G, _ = new(big.Int).SetString(rfc3526_2048G, 16)
	rfc3526_2048.P, _ = new(big.Int).SetString(rfc3526_2048P, 16)

}

func initRFC3526_3072() {
	rfc3526_3072 = &Group{}
	rfc3526_3072.G, _ = new(big.Int).SetString(rfc3526_3072G, 16)
	rfc3526_3072.P, _ = new(big.Int).SetString(rfc3526_3072P, 16)

}

func initRFC3526_4096() {
	rfc3526_4096 = &Group{}
	rfc3526_4096.G, _ = new(big.Int).SetString(rfc3526_4096G, 16)
	rfc3526_4096.P, _ = new(big.Int).SetString(rfc3526_4096P, 16)
}

//初始化素数和生成器
func initAll() {
	initRFC3526_2048()
	initRFC3526_3072()
	initRFC3526_4096()
}

// 初始化模2048位素数的dh.Group
func Init_2048() (g *Group) {
	once.Do(initAll)
	g = &Group{
		P: new(big.Int).Set(rfc3526_2048.P),
		G: new(big.Int).Set(rfc3526_2048.G),
	}
	return g
}

// 初始化模3072位素数的dh.Group
func Init_3072() (g *Group) {
	once.Do(initAll)
	g = &Group{
		P: new(big.Int).Set(rfc3526_3072.P),
		G: new(big.Int).Set(rfc3526_3072.G),
	}
	return g
}

// 初始化模4096位素数的dh.Group
func Init_4096() (g *Group) {
	once.Do(initAll)
	g = &Group{
		P: new(big.Int).Set(rfc3526_4096.P),
		G: new(big.Int).Set(rfc3526_4096.G),
	}
	return g
}
